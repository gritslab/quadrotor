"""
@brief This is a an auto generated file for simulating the dynamics of the quad.
@date 26-OCT-2014
@copyright: Copyright (C) 2014, see the LICENSE file
"""

import numpy as np
from numpy import sin as sin
from numpy import cos as cos

def quad_dynamics(g,m,I_x,I_y,I_z,xD,yD,zD,phi,theta,psi,phiD,thetaD,psiD,F,tau_phi,tau_theta,tau_psi):
    # QUAD_DYNAMICS
    #     [F_TRANS,F_ROT,A_TRANS,B_TRANS,A_ROT,B_ROT] = QUAD_DYNAMICS(G,M,I_X,I_Y,I_Z,XD,YD,ZD,PHI,THETA,PSI,PHID,THETAD,PSID,F,TAU_PHI,TAU_THETA,TAU_PSI)

    #     This function was generated by the Symbolic Math Toolbox version 6.0.
    #     26-Oct-2014 01:37:11

    t2 = 1.0/m
    t3 = sin(phi)
    t4 = sin(psi)
    t5 = cos(phi)
    t6 = cos(psi)
    t7 = sin(theta)
    t8 = cos(theta)
    t9 = t3**2
    t10 = I_y*t9
    t11 = 1.0/I_y
    t12 = 1.0/I_z
    t13 = t7**2
    t14 = t13-1.0
    t15 = 1.0/t14
    t16 = thetaD**2
    t17 = phi*2.0
    t18 = sin(t17)
    t19 = psiD**2
    t20 = t8**2
    t21 = t5**2
    t22 = theta*2.0
    t23 = sin(t22)
    t24 = 1.0/t8
    t25 = I_z**2
    t26 = t9-1.0
    t27 = I_y**2
    t28 = t21**2
    t29 = t9**2
    t30 = t3*t6
    t31 = t30-t4*t5*t7
    t32 = t3*t4
    t33 = t5*t6*t7
    t34 = t32+t33
    f_trans = np.array([[xD],[yD],[zD],[F*t2*t31],[-F*t2*t34],[-g+F*t2*t5*t8]])
    t35 = 1.0/I_x
    t36 = I_y*I_z
    t37 = I_x*I_y*t13
    t38 = I_x*I_z*t9*t13
    t67 = I_y*I_z*t13
    t68 = I_x*I_y*t9*t13
    t39 = t36+t37+t38-t67-t68
    t40 = I_y*(1.0/2.0)
    t41 = I_z*(1.0/2.0)
    t42 = t40-t41
    t43 = I_y*t19*t23*(1.0/2.0)
    t44 = I_x*phiD*psiD*t8
    t45 = I_z*phiD*t18*thetaD
    t46 = I_z*t7*t8*t19*t21
    t47 = I_y*phiD*psiD*t8*t21*2.0
    t48 = I_z*phiD*psiD*t8*t9*2.0
    t49 = I_z*psiD*t3*t5*t7*thetaD
    t50 = t43+t44+t45+t46+t47+t48+t49-tau_theta-I_x*t19*t23*(1.0/2.0)-I_y*phiD*t18*thetaD-I_y*t7*t8*t19*t21-I_y*psiD*t3*t5*t7*thetaD
    t51 = I_z*t9
    t52 = I_y-t10+t51
    t53 = I_y-I_z
    t54 = I_z*t16*t18*(1.0/2.0)
    t55 = I_x*psiD*t8*thetaD*2.0
    t56 = I_z*psiD*t8*thetaD
    t57 = I_y*t3*t5*t19*t20
    t58 = I_y*psiD*t8*t21*thetaD*2.0
    t59 = t54+t55+t56+t57+t58+tau_phi-I_y*t16*t18*(1.0/2.0)-I_y*psiD*t8*thetaD-I_z*psiD*t8*t21*thetaD*2.0-I_z*t3*t5*t19*t20
    t60 = I_z*t7*t21*thetaD
    t61 = I_y*t7*t9*thetaD
    t62 = I_z*phiD*t3*t5*t8
    t70 = I_x*t7*thetaD
    t71 = I_y*phiD*t3*t5*t8
    t63 = t60+t61+t62-t70-t71
    t64 = psiD*t8*t63*2.0
    t65 = I_x**2
    t66 = t20**2
    t69 = I_z+t10-t51
    t72 = 1.0/t8**2
    f_rot = np.array([[phiD],[thetaD],[psiD],[-t11*t12*t15*t35*t39*t59-t7*t11*t12*t15*t52*(t64+tau_psi+phiD*t8*thetaD*(I_z+t10-I_z*t9)*2.0)+t7*t11*t12*t18*t24*t42*t50],[-t11*t12*t24*(I_y*t18*tau_psi*(1.0/2.0)-I_z*t18*tau_psi*(1.0/2.0)-I_y*t8*t9*tau_theta-I_z*t8*t21*tau_theta+I_y*t3*t5*t7*tau_phi-I_z*t3*t5*t7*tau_phi+t7*t9*t16*t25*t26+t7*t9*t16*t26*t27-t7*t14*t19*t27*t29+t7*t19*t20*t25*t28+t7*t9*t19*t20*t21*t25+t7*t9*t19*t20*t21*t27+I_x*I_y*phiD*psiD*t9*t20+I_x*I_z*phiD*psiD*t20*t21+I_y*I_z*phiD*psiD*t20*t28*2.0+I_y*I_z*phiD*psiD*t20*t29*2.0+I_x*I_y*t7*t9*t14*t19-I_x*I_z*t7*t19*t20*t21-I_y*I_z*t7*t9*t16*t26*2.0+I_y*I_z*phiD*psiD*t9*t20*t21*4.0-psiD*t3*t5*t7*t8*t9*t25*thetaD+psiD*t3*t5*t7*t8*t21*t27*thetaD+I_y*I_z*psiD*t3*t5*t7*t8*t9*thetaD-I_y*I_z*psiD*t3*t5*t7*t8*t21*thetaD)],[t11*t12*t72*(I_z*tau_psi+I_y*t21*tau_psi+I_z*t7*tau_phi-I_z*t21*tau_psi+I_y*t7*t21*tau_phi-I_z*t7*t21*tau_phi+psiD*t23*t25*thetaD*(1.0/2.0)+I_y*I_z*phiD*t8*thetaD*2.0+I_y*I_z*psiD*t23*thetaD*(1.0/2.0)-I_y*t3*t5*t8*tau_theta+I_z*t3*t5*t8*tau_theta+t3*t5*t7*t16*t25-psiD*t7*t8*t21*t25*thetaD*2.0+psiD*t7*t8*t25*t28*thetaD+psiD*t7*t8*t27*t28*thetaD-t3*t5*t7*t16*t21*t25-t3*t5*t7*t16*t21*t27-t3*t5*t7*t19*t20*t25+t3*t5*t7*t19*t20*t27-I_y*I_z*t3*t5*t7*t16+I_x*I_y*phiD*psiD*t3*t5*t20-I_x*I_z*phiD*psiD*t3*t5*t20+I_y*I_z*psiD*t7*t8*t21*thetaD*2.0-I_y*I_z*psiD*t7*t8*t28*thetaD*2.0-I_x*I_y*t3*t5*t7*t19*t20+I_x*I_z*t3*t5*t7*t19*t20+I_y*I_z*t3*t5*t7*t16*t21*2.0)]])
    A_trans = np.reshape(np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0]), (6, 6)).T
    B_trans = np.array([[0.0],[0.0],[0.0],[t2*t31],[-t2*t34],[t2*t5*t8]])
    t73 = t7-t7*t13
    t74 = I_z*t18*thetaD
    t75 = I_z*psiD*t8
    t76 = 1.0/t8**3
    t77 = I_y*I_z*thetaD*2.0
    t78 = I_x*I_y*psiD*t3*t5*t8
    t79 = t77+t78-I_x*I_z*psiD*t3*t5*t8
    t80 = I_y*I_z*phiD*t8*2.0
    t81 = psiD*t7*t8*t21*t25*2.0
    A_rot = np.reshape(np.array([0.0,0.0,0.0,t11*t12*t15*t35*t39*t53*(-t16+t16*t21*2.0+t19*t20-t19*t20*t21*2.0+psiD*t3*t5*t8*thetaD*4.0)+t7*t11*t12*t24*t42*t50*cos(t17)*2.0-t7*t8*t11*t12*t15*t52*(I_y*2.0-I_z*2.0)*(phiD*psiD*t8-phiD*psiD*t8*t21*2.0+phiD*t3*t5*thetaD*2.0+psiD*t3*t5*t7*thetaD*2.0)+t3*t5*t11*t12*t13*t15*t53*t59*2.0+t3*t5*t7*t11*t12*t15*t53*(t64+tau_psi+phiD*t8*t69*thetaD*2.0)*2.0+t3*t5*t7*t11*t12*t24*t42*t53*(phiD*thetaD*2.0-phiD*t21*thetaD*4.0+psiD*t7*thetaD-psiD*t7*t21*thetaD*2.0-phiD*psiD*t3*t5*t8*4.0+t3*t5*t7*t8*t19*2.0)*2.0,t11*t12*t24*t53*(tau_psi+t7*tau_phi-t21*tau_psi*2.0-t7*t21*tau_phi*2.0+I_z*psiD*t23*thetaD*(1.0/2.0)+t3*t5*t8*tau_theta*2.0-I_y*t3*t5*t7*t16*2.0+I_z*t3*t5*t7*t16*2.0-I_x*phiD*psiD*t3*t5*t20*2.0+I_y*psiD*t7*t8*t21*thetaD*3.0-I_y*psiD*t7*t8*t28*thetaD*4.0-I_z*psiD*t7*t8*t21*thetaD*5.0+I_z*psiD*t7*t8*t28*thetaD*4.0+I_x*t3*t5*t7*t19*t20*2.0+I_y*t3*t5*t7*t16*t21*4.0-I_y*t3*t5*t7*t19*t20*2.0-I_z*t3*t5*t7*t16*t21*4.0-I_z*t3*t5*t7*t19*t20*2.0),-t11*t12*t53*t72*(-t8*tau_theta-I_z*t7*t16+t3*t5*tau_psi*2.0+t8*t21*tau_theta*2.0-I_x*t7*t19*t20-I_y*t7*t16*t21*3.0+I_y*t7*t19*t20+I_y*t7*t16*t28*4.0+I_z*t7*t16*t21*5.0+I_z*t7*t19*t20-I_z*t7*t16*t28*4.0+t3*t5*t7*tau_phi*2.0+I_x*phiD*psiD*t20-I_x*phiD*psiD*t20*t21*2.0+I_x*t7*t19*t20*t21*2.0-I_y*t7*t19*t20*t21*2.0-I_z*t7*t19*t20*t21*2.0+I_z*psiD*t3*t5*t7*t8*thetaD*4.0+I_y*psiD*t3*t5*t7*t8*t21*thetaD*4.0-I_z*psiD*t3*t5*t7*t8*t21*thetaD*4.0),0.0,0.0,0.0,t11*t12*t35*t76*(I_x*I_z*tau_psi*2.0+I_x*I_y*t21*tau_psi*2.0+I_x*I_z*t7*tau_phi*2.0-I_x*I_z*t20*tau_psi-I_x*I_z*t21*tau_psi*2.0+I_x*I_y*t7*t21*tau_phi*2.0-I_x*I_y*t20*t21*tau_psi-I_x*I_z*t7*t21*tau_phi*2.0+I_x*I_z*t20*t21*tau_psi+I_x*psiD*t23*t25*thetaD*(1.0/2.0)+I_x*I_y*I_z*phiD*t8*thetaD*2.0+I_x*I_y*I_z*psiD*t23*thetaD*(1.0/2.0)-I_x*I_y*t3*t5*t8*tau_theta+I_x*I_z*t3*t5*t8*tau_theta+I_x*t3*t5*t7*t16*t25*2.0-I_x*I_y*I_z*t3*t5*t7*t16*2.0+I_y*phiD*psiD*t3*t5*t65*t66-I_z*phiD*psiD*t3*t5*t65*t66+I_x*psiD*t7*t8*t20*t25*thetaD-I_x*psiD*t7*t8*t21*t25*thetaD*2.0+I_x*psiD*t7*t8*t25*t28*thetaD+I_x*psiD*t7*t8*t27*t28*thetaD-I_y*psiD*t7*t8*t20*t25*thetaD+I_z*psiD*t7*t8*t20*t27*thetaD-I_x*t3*t5*t7*t16*t21*t25*2.0-I_x*t3*t5*t7*t16*t21*t27*2.0-I_x*t3*t5*t7*t19*t25*t66*2.0+I_x*t3*t5*t7*t19*t27*t66*2.0+I_y*t3*t5*t7*t19*t25*t66*2.0-I_y*t3*t5*t7*t19*t65*t66*2.0-I_z*t3*t5*t7*t19*t27*t66*2.0+I_z*t3*t5*t7*t19*t65*t66*2.0-I_x*I_y*I_z*psiD*t7*t8*t20*thetaD+I_x*I_y*I_z*psiD*t7*t8*t21*thetaD*2.0-I_x*I_y*I_z*psiD*t7*t8*t28*thetaD*2.0+I_x*I_y*I_z*t3*t5*t7*t16*t21*4.0-I_x*psiD*t7*t8*t20*t21*t25*thetaD*2.0+I_x*psiD*t7*t8*t20*t25*t28*thetaD+I_x*psiD*t7*t8*t20*t27*t28*thetaD+I_y*psiD*t7*t8*t20*t21*t25*thetaD*2.0-I_z*psiD*t7*t8*t20*t21*t27*thetaD*2.0+I_x*I_y*I_z*psiD*t7*t8*t20*t21*thetaD*2.0-I_x*I_y*I_z*psiD*t7*t8*t20*t28*thetaD*2.0),t11*t12*t72*(I_y*t18*tau_phi*(-1.0/2.0)+I_z*t18*tau_phi*(1.0/2.0)+t16*t21*t25+t16*t21*t27+t19*t20*t27-t16*t25*t28-t16*t27*t28-t19*t27*t66*2.0+t19*t20*t21*t25-t19*t20*t21*t27-t19*t21*t25*t66*2.0+t19*t21*t27*t66*2.0-I_x*I_y*t19*t20+I_x*I_y*t19*t66*2.0-I_y*I_z*t16*t21*2.0+I_y*I_z*t16*t28*2.0+I_x*I_y*phiD*psiD*t73+I_y*I_z*phiD*psiD*t73*2.0+I_x*I_y*t19*t20*t21-I_x*I_y*t19*t21*t66*2.0-I_x*I_z*t19*t20*t21+I_x*I_z*t19*t21*t66*2.0-I_y*t3*t5*t7*tau_psi+I_z*t3*t5*t7*tau_psi-I_x*I_y*phiD*psiD*t7*t20*t21+I_x*I_z*phiD*psiD*t7*t20*t21+psiD*t3*t5*t8*t20*t25*thetaD-I_y*I_z*psiD*t3*t5*t8*t20*thetaD-psiD*t3*t5*t8*t20*t21*t25*thetaD-psiD*t3*t5*t8*t20*t21*t27*thetaD+I_y*I_z*psiD*t3*t5*t8*t20*t21*thetaD*2.0),t11*t12*t76*(I_z*tau_phi*2.0+I_y*t21*tau_phi*2.0+I_z*t7*tau_psi*2.0-I_z*t20*tau_phi-I_z*t21*tau_phi*2.0+t16*t18*t25+I_y*t7*t21*tau_psi*2.0-I_y*t20*t21*tau_phi-I_z*t7*t21*tau_psi*2.0+I_z*t20*t21*tau_phi+psiD*t8*t25*thetaD-I_y*I_z*t16*t18+I_y*I_z*phiD*t23*thetaD+I_y*I_z*psiD*t8*thetaD-psiD*t8*t21*t25*thetaD*2.0+psiD*t8*t25*t28*thetaD+psiD*t8*t27*t28*thetaD-t3*t5*t16*t20*t25-t3*t5*t16*t21*t25*2.0-t3*t5*t16*t21*t27*2.0-t3*t5*t19*t25*t66+t3*t5*t19*t27*t66+t3*t5*t16*t20*t21*t25+t3*t5*t16*t20*t21*t27+I_y*I_z*psiD*t8*t21*thetaD*2.0-I_y*I_z*psiD*t8*t28*thetaD*2.0-I_x*I_y*t3*t5*t19*t66+I_x*I_z*t3*t5*t19*t66+I_y*I_z*t3*t5*t16*t20+I_y*I_z*t3*t5*t16*t21*4.0-I_y*t3*t5*t7*t8*tau_theta+I_z*t3*t5*t7*t8*tau_theta-I_y*I_z*t3*t5*t16*t20*t21*2.0),0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,t7*t11*t12*t24*t79,-psiD*t8*t11*t12*(I_x*I_y+I_y*I_z*2.0-I_x*I_y*t21+I_x*I_z*t21),t11*t12*t24*t79,0.0,1.0,0.0,-t7*t11*t12*t15*t52*(phiD*t8*t69*2.0-psiD*t7*t8*(I_x-I_z-t10+t51)*2.0)-t11*t12*t15*t35*t39*(t74+t75+I_x*psiD*t8*2.0-I_y*psiD*t8-I_y*t18*thetaD+I_y*psiD*t8*t21*2.0-I_z*psiD*t8*t21*2.0)-t7*t11*t12*t18**2*t24*t53**2*(phiD*2.0+psiD*t7)*(1.0/4.0),-t3*t5*t7*t11*t12*t24*t53*(t74+t75-I_y*t18*thetaD+I_y*psiD*t8*t21-I_z*psiD*t8*t21),t11*t12*t72*(t80-t81+psiD*t23*t25*(1.0/2.0)+I_y*I_z*psiD*t23*(1.0/2.0)+psiD*t7*t8*t25*t28+psiD*t7*t8*t27*t28+t3*t5*t7*t25*thetaD*2.0-t3*t5*t7*t21*t25*thetaD*2.0-t3*t5*t7*t21*t27*thetaD*2.0+I_y*I_z*psiD*t7*t8*t21*2.0-I_y*I_z*psiD*t7*t8*t28*2.0-I_y*I_z*t3*t5*t7*thetaD*2.0+I_y*I_z*t3*t5*t7*t21*thetaD*4.0),0.0,0.0,1.0,t7*t8*t11*t12*t15*t52*t63*-2.0-t8*t11*t12*t15*t35*t39*(I_x*thetaD*2.0-I_y*thetaD+I_z*thetaD+I_y*t21*thetaD*2.0-I_z*t21*thetaD*2.0+I_y*psiD*t3*t5*t8*2.0-I_z*psiD*t3*t5*t8*2.0)+t7*t11*t12*t18*t24*t42*(I_x*phiD*t8-I_x*psiD*t23+I_y*psiD*t23+I_y*phiD*t8*t21*2.0+I_z*phiD*t8*t9*2.0-I_y*psiD*t7*t8*t21*2.0+I_z*psiD*t7*t8*t21*2.0-I_y*t3*t5*t7*thetaD+I_z*t3*t5*t7*thetaD),-t11*t12*(t80+t81+psiD*t23*t27+I_x*I_y*phiD*t8-I_x*I_y*psiD*t23-I_x*I_y*phiD*t8*t21+I_x*I_z*phiD*t8*t21-psiD*t7*t8*t21*t27*2.0-t3*t5*t7*t25*thetaD+t3*t5*t7*t21*t25*thetaD+t3*t5*t7*t21*t27*thetaD+I_x*I_y*psiD*t7*t8*t21*2.0-I_x*I_z*psiD*t7*t8*t21*2.0+I_y*I_z*t3*t5*t7*thetaD-I_y*I_z*t3*t5*t7*t21*thetaD*2.0),t11*t12*t24*(t7*t25*thetaD-t7*t21*t25*thetaD*2.0+t7*t25*t28*thetaD+t7*t27*t28*thetaD+I_y*I_z*t7*thetaD+I_y*I_z*t7*t21*thetaD*2.0-I_y*I_z*t7*t28*thetaD*2.0-psiD*t3*t5*t7*t8*t25*2.0+psiD*t3*t5*t7*t8*t27*2.0+I_x*I_y*phiD*t3*t5*t8-I_x*I_z*phiD*t3*t5*t8-I_x*I_y*psiD*t3*t5*t7*t8*2.0+I_x*I_z*psiD*t3*t5*t7*t8*2.0)]), (6, 6)).T
    B_rot = np.reshape(np.array([0.0,0.0,0.0,-t11*t12*t15*t35*t39,-t3*t5*t7*t11*t12*t24*t53,-t7*t11*t12*t15*t52,0.0,0.0,0.0,-t7*t11*t12*t18*t24*t42,t11*t12*t69,t11*t12*t18*t24*t53*(-1.0/2.0),0.0,0.0,0.0,-t7*t11*t12*t15*t52,t11*t12*t18*t24*t53*(-1.0/2.0),t11*t12*t72*(I_z+I_y*t21-I_z*t21)]), (3, 6)).T
    return (f_trans,f_rot,A_trans,B_trans,A_rot,B_rot)
